mixin requiredConstraint(property)
  if property.required
    .badge.badge-required Required

mixin repeatConstraint(property)
  if property.repeat
    .badge.badge-repeat Repeatable

mixin defaultConstraint(property)
  if property.default != undefined
    .badge.badge-default Default:
      code= property.default

mixin minMaxConstraint(property)
  if property.minimum !== undefined || property.maximum !== undefined
    if property.minimum === property.maximum
      .badge.badge-required == #{minimum}
    else if property.minimum !== undefined && property.maximum !== undefined
      .badge.badge-constraint #{property.minimum} <= value <= #{property.maximum}
    else if property.minimum !== undefined
      .badge.badge-constraint >= #{property.minimum}
    else
      .badge.badge-constraint <= #{property.maximum}

mixin minMaxLengthConstraint(property)
  if property.minLength !== undefined || property.maxLength !== undefined
    if property.minLength === property.maxLength
      .badge.badge-required Length == #{minLength}
    else if property.minLength !== undefined && property.maxLength !== undefined
      .badge.badge-constraint #{property.minLength} <= length <= #{property.maxLength}
    else if property.minLength !== undefined
      .badge.badge-constraint Length >= #{property.minLength}
    else
      .badge.badge-constraint Length <= #{property.maxLength}

mixin enumConstraint(property)
  if property.enum
    if property.enum.length === 1
      .badge.badge-constraint == #{property.enum[0]}
    else
      .badge.badge-constraint One of:
        each value, i in property.enum
          code= value

mixin patternConstraint(property)
  if property.pattern
    .badge.badge-constraint
      code.pattern /#{property.pattern}/

mixin constraints(property)
  +requiredConstraint(property)
  +repeatConstraint(property)
  +defaultConstraint(property)

  if (property.type == 'integer' || property.type == 'number')
    +minMaxConstraint(property)

  if (property.type == 'string')
    +patternConstraint(property)
    +minMaxLengthConstraint(property)
    +enumConstraint(property)

mixin namedParameters(namedParameters)
  .flex-table
    .flex-table-headers.no-left-border
      .flex-table-header.s2 Name
      .flex-table-header.center Type
      .flex-table-header.s2 Constraints
      .flex-table-header.s4 Description
      .flex-table-header.s4 Example
    each param in namedParameters
      .flex-table-row.no-left-border
        .flex-table-cell.s2= param.displayName

        .flex-table-cell.center
          if param.enum
            | enum[#{param.type ? param.type : '?'}]
          else
            | #{param.type ? param.type : 'unknown'}

        .flex-table-cell.s2.constraints
          +constraints(param)

        .flex-table-cell.s4!= helpers.marked(param.description)
        .flex-table-cell.s4!= helpers.marked(param.example)

mixin namedParametersSection(uid, verb, sectionType, title, namedParameters)
  .method-section
    h3(data-toggle='collapse', data-target='##{uid}-#{verb}-#{sectionType}')= title
    .method-section-content
      .panel-collapse.collapse(id='#{uid}-#{verb}-#{sectionType}', class='#{helpers.toggleStateClass()}')
        +namedParameters(namedParameters)

mixin example(example, uid)
  .method-section
    h3(data-toggle='collapse', data-target='##{uid}') Example

    .method-section-content.panel-collapse.collapse.in(id='#{uid}')
      pre!= helpers.highlight(example)

mixin responsesSummary(responses)
  .method-section
    h3.no-action Summary
    .method-section-content
      .flex-table
        .flex-table-headers.no-left-border
          .flex-table-header.center Status Code
          .flex-table-header.s4 Description

        each response, key in responses
          .flex-table-row.no-left-border
            .flex-table-cell.center
              a(href='http://httpstatus.es/#{key}', target='_blank')=key
            .flex-table-cell.s4!= helpers.marked(response.description)

mixin resource(resource, level)
  .resource(class='resource-level-#{level}', id='#{resource.uniqueId}')
    h4.resource-title
      .resource-title-uri
        a.toggle(data-ref='##{resource.uniqueId} > .collapse-level-#{level}')
          //span.parent=resource.parentUrl
          span.child=resource.relativeUri

      if resource.description
        .resource-title-description
          span= helpers.shorten(resource.description)
          if helpers.isShortable(resource.description)
            a.description-link(data-toggle='collapse', data-target='##{resource.uniqueId}-description') show full description.

      .resource-title-badges
        if resource.methods
          each method in resource.methods
            a(data-toggle='collapse', data-target='##{resource.uniqueId}-#{method.method}')
              span.badge(id='#{method.method}_#{resource.uniqueId}', class="badge-#{method.method}")
                | #{method.method}
                if helpers.is(resource, method, 'auth')
                  i.glyphicon.glyphicon-lock
                if helpers.isSecuredBy(method, 'jwt', 'owner')
                  i.glyphicon.glyphicon-user
                if helpers.isSecuredBy(method, 'test', null)
                  i.glyphicon.glyphicon-ok

    if resource.description && helpers.isShortable(resource.description)
      .description.panel-collapse.collapse(id='#{resource.uniqueId}-description', class='#{helpers.toggleStateClass()}')!= helpers.marked(resource.description)

    if resource.methods
      each method in resource.methods
        .panel-collapse.collapse-method.collapse(id='#{resource.uniqueId}-#{method.method}', class="collapse-level-#{level}", data-ref='##{resource.uniqueId} > .collapse-level-#{level}', class='#{helpers.toggleStateClass()}')
          .method(class="method-#{method.method}")
            h4.method-title
              span.verb(class='badge-#{method.method}') #{method.method}
              | &nbsp;&nbsp;
              span.url #{resource.parentUrl}#{resource.relativeUri}

            .method-body
              if method.description
                .description!= helpers.marked(method.description)

              .method-section
                h3(data-toggle='collapse', href='##{resource.uniqueId}-#{method.method}-request') Request

                .method-section-content.panel-collapse.collapse.in(id='#{resource.uniqueId}-#{method.method}-request')
                  if resource.allUriParameters && resource.allUriParameters.length > 0
                    +namedParametersSection(resource.uniqueId, method.method, 'req-uri-params', 'URI Parameters', resource.allUriParameters)

                  if method.queryParameters
                    +namedParametersSection(resource.uniqueId, method.method, 'req-query-params', 'Query Parameters', method.queryParameters)

                  if method.headers
                    +namedParametersSection(resource.uniqueId, method.method, 'req-headers', 'Headers', method.headers)

                  if method.formParameters
                    +namedParametersSection(resource.uniqueId, method.method, 'req-form-params', 'Form parameters', method.formParameters)

                  if method.body
                    .method-section
                      h3.no-action Body

                      each b, key in method.body
                        if b.schema
                          +jsonSchema(b.schema, resource.uniqueId + '-' + method.method + '-request')
                        if b.example
                          +example(b.example, resource.uniqueId + '-' + method.method + '-reques-body-example')

              if method.responses
                .method-section
                  h3(data-toggle='collapse', href='##{resource.uniqueId}-#{method.method}-response') Response

                  .method-section-content.panel-collapse.collapse(id='#{resource.uniqueId}-#{method.method}-response', class='#{helpers.toggleStateClass()}')
                    +responsesSummary(method.responses)

                    each response, key in method.responses
                      if response.headers || response.body
                        .method-section
                          h3.no-action HTTP status code #{key}

                          if response.headers
                            +namedParametersSection(resource.uniqueId, method.method, 'res-headers', 'Headers', response.headers)

                          if response.body
                            .method-section
                              h3.no-action Body

                              each rb, contentType in response.body
                                if rb && rb.schema
                                  +jsonSchema(rb.schema, resource.uniqueId + '-' + method.method + '-' + key + '-response')

                                if rb && rb.example
                                  +example(rb.example, resource.uniqueId + '-' + method.method + '-response-' + key + '-body-example')


    //- recursively traverse sub-resources
    if resource.resources
      each subResource in resource.resources
        +resource(subResource, level + 1)
