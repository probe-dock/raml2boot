mixin readWriteJsonConstraint(property)
  if property.readOnly
    .badge.badge-rw Read-only
  if property.writeOnly
    .badge.badge.rw Write-only

mixin uniqueJsonConstraint(property)
  if property.unique
    .badge.badge-unique Unique

mixin patternJsonConstraint(property)
  if property.pattern
    .badge.badge-constraint
      code.pattern /#{property.pattern}/

mixin formatJsonConstraint(property)
  if property.format == 'date-time'
    .badge.badge-constraint
      a(href='http://en.wikipedia.org/wiki/ISO_8601') ISO-8601 date
  else if property.format == 'uri'
    .badge.badge-constraint URI

mixin minMaxJsonConstraint(property)
  if property.minimum !== undefined || property.maximum !== undefined
    - var exclusiveMinimum = property.exclusiveMinimum ? '<' : '<=';
    - var exclusiveMaximum = property.exclusiveMaximum ? '<' : '<=';

    if property.minimum === property.maximum
      .badge.badge-constraint == #{property.minimum}

    else if property.minimum !== undefined && property.maximum !== undefined
      .badge.badge-constraint #{property.minimum} #{exclusiveMinimum} value #{exclusiveMaximum} #{property.maximum}

    else if property.minimum !== undefined
      .badge.badge-constraint #{exclusiveMinimum.replace('<', '>')} #{property.minimum}

    else
      .badge.badge-constraint #{exclusiveMaximum} #{property.maximum}

mixin minMaxItemsJsonConstraint(property)
  if property.minItems || property.maxItems
    if property.minItems === 1 && property.maxItems === 1
      .badge.badge-constraint Exactly #{property.minItems} #{'item' + (property.minItems > 1 ? 's' : '')}

    else if property.minItems && property.maxItems
      .badge.badge-constraint Between #{property.minItems} and #{property.maxItems} #{'item' + (property.maxItems > 1 ? 's' : '')}

    else if property.minItems
      .badge.badge-constraint At least #{property.minItems} #{'item' + (property.minItems > 1 ? 's' : '')}

    else if property.maxItems
      .badge.badge-constraint At most #{property.minItems} #{'item' + (property.maxItems > 1 ? 's' : '')}

mixin minMaxLengthJsonConstraint(property)
  if property.minLength !== undefined || property.maxLength !== undefined
    if property.minLength === property.maxLength
      .badge.badge-constraint #{property.minLength} #{'char' + (property.minLength > 1 ? 's' : '')}

    else if property.minLength !== undefined && property.maxLength !== undefined
      .badge.badge-constraint Between #{property.minLength} and #{property.maxLength} #{'char' + (property.maxLength > 1 ? 's' : '')}

    else if property.minLength !== undefined
      .badge.badge-constraint At least #{property.minLength} #{'char' + (property.minLength > 1 ? 's' : '')}

    else
      .badge.badge-constraint At most #{property.maxLength} #{'char' + (property.maxLength > 1 ? 's' : '')}


mixin enumJsonConstraint(property)
  if property.enum
    if property.enum.length === 1
      .badge.badge-required Must be: #{property.enum[0]}
    else
      .badge.badge-constraint One of:
        each value, i in property.enum
          code= value

mixin jsonSchemaConstraints(property, name, required)
  if required && required.indexOf(name) > -1
    .badge.badge-required Required

  +readWriteJsonConstraint(property)
  +uniqueJsonConstraint(property)
  +patternJsonConstraint(property)
  +formatJsonConstraint(property)
  +minMaxJsonConstraint(property)
  +minMaxLengthJsonConstraint(property)
  +enumJsonConstraint(property)
  +minMaxItemsJsonConstraint(property)

mixin propertyRowLeveled(property, level)
  if property.type == 'object' || property.properties
    +properties(property, level + 1)
  else if property.type == 'array' && property.items
    +propertyRow(null, property.items, [], level + 1)

mixin propertyRowContent(name, property, required, level)
  .flex-table-row(class='level-#{level}')
    if name
      if property.type
        .flex-table-cell.s2.property= name
      else
        .flex-table-cell.s2.property
          .badge= name
    else
      .flex-table-cell.s2.property
        .badge #{property.type == 'array' ? 'collection' : 'item'}
    .flex-table-cell.center
      if property.enum
        | enum[#{property.type ? property.type : '?'}]
      else
        = property.type
    .flex-table-cell.s2.constraints
      +jsonSchemaConstraints(property, name, required)
    .flex-table-cell.s4!= helpers.marked(property.description)

mixin propertyRow(name, property, required, level)
  if helpers.isSchemaIndentBordered
    .flex-table(class='level-#{level}')
      +propertyRowContent(name, property, required, level)

      if property.type == 'object' || property.type == 'array'
        +propertyRowLeveled(property, level)

  else
    +propertyRowContent(name, property, required, level)
    +propertyRowLeveled(property, level)

mixin propertyOneOfRow(property, level)
  .flex-table(class='level-#{level}')
    .flex-table-row(class='level-#{level}')
      .flex-table-cell.s2.property
        .badge oneOf
      .flex-table-cell.center
        .badge object
      .flex-table-cell.s2.constraints
        .badge.badge-required One is required in the following objects
      .flex-table-cell.s4!= helpers.marked(property.description)

    each oneOfProperty, i in property.oneOf
      if i > 0
        .flex-table(class='level-#{level + 2}')
          .flex-table-row(class='level-#{level + 2}')
            .flex-table-cell.center
              span.or Or

      +propertyRow('object', oneOfProperty, [], level + 1)

mixin properties(schema, level)
  if schema.type == 'array'
    +propertyRow(null, schema, schema.required, level)

  else if schema.oneOf
    +propertyOneOfRow(schema, level)

  else
    if schema.properties
      each property, name in schema.properties
        +propertyRow(name, property, schema.required, level)

    if schema.patternProperties
      each property, name in schema.patternProperties
        +propertyRow(name, property, schema.required, level)

mixin jsonSchemaTable(schema)
  .jsonSchemaLevel
    if schema.properties || schema.patternProperties || schema.items || schema.oneOf
      .flex-table
        .flex-table-row.no-left-border
          .flex-table-cell.center
            h2= schema.title
            if schema.description && !schema.oneOf
              div!= helpers.marked(schema.description)

        .flex-table-headers
          .flex-table-header.s2 Property
          .flex-table-header.center Type
          .flex-table-header.s2.center JSON Schema Constraints
          .flex-table-header.s4 Description

        +properties(schema, 0)
